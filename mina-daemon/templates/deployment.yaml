---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}
  labels:
    app: {{ .Release.Name }}
spec:
  replicas: {{ .Values.node.replicas }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}
  {{- if .Values.updateStrategy  }}
  strategy: {{- toYaml .Values.updateStrategy | nindent  4 }}
  {{- end }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}
        testnet: {{ .Values.deployment.testnet }}
        role: {{ default "undefined" .Values.node.role }}
        version: {{ trunc 8 (split ":" .Values.deployment.image)._1 | trimSuffix "-" }}
        {{- if .Values.node.exposeGraphql }}
        exposeGraphql: "true"
        {{- end -}}
      {{- with .Values.podLabels }}
      {{- toYaml . | nindent 8 }}
      {{- end }}
      annotations:
      {{- with .Values.podAnnotations }}
      {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.node.metrics.enabled }}
        prometheus.io/scrape: 'true'
        prometheus.io/port: {{ .Values.node.metrics.port | quote }}
        prometheus.io/path: '/metrics'
      {{- end }}
        checksum/environment: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
    spec:
      serviceAccountName: {{ .Release.Name }}
      initContainers:
        {{ if .Values.node.libp2pKeys.enabled -}}
        {{ if .Values.node.libp2pKeys.create -}}
        - name: generate-libp2p-keys
          image: {{ .Values.deployment.image }}
          command: ["/bin/sh", "/scripts/generate-libp2p-keys.sh"]
          env:
            - name: MINA_LIBP2P_PRIV_KEYPATH
              value: /root/libp2p-keys/{{ .Values.node.name }}-libp2p
          volumeMounts:
            - name: {{ .Release.Name }}-scripts
              mountPath: /scripts/generate-libp2p-keys.sh
              subPath: generate-libp2p-keys.sh
            - name: {{ .Release.Name }}-generated-libp2p-keys
              mountPath: /root/libp2p-keys
        {{- else -}}
        - name: fix-libp2p-perms
          image: {{ .Values.deployment.image }}
          command:
            - sh
            - -c
            - cp /libp2p-keys/* /root/libp2p-keys && chmod -R 0700 /root/libp2p-keys/
          volumeMounts:
            - name: {{ .Release.Name }}-mounted-libp2p-keys
              mountPath: /libp2p-keys
            - name: {{ .Release.Name }}-fixed-libp2p-keys
              mountPath: /root/libp2p-keys
        {{- end }}
        {{- end }}
        {{ if .Values.node.walletKeys.enabled -}}
        - name: fix-mina-perms
          image: {{ .Values.deployment.image }}
          command:
            - sh
            - -c
            - cp /mina-keys/* /root/mina-keys/ && chmod -R 0700 /root/mina-keys/
          volumeMounts:
            - name: {{ .Release.Name }}-mounted-mina-keys
              mountPath: /mina-keys
            - name: {{ .Release.Name }}-fixed-mina-keys
              mountPath: /root/mina-keys
        {{- end }}
        {{ if .Values.deployment.genesisLedgerURL -}}
        - name: get-genesis-ledger
          image: {{ .Values.deployment.image }}
          command:
            - curl
            - -o
            - /root/.mina-config/genesis_ledger.json
            - {{ .Values.deployment.genesisLedgerURL }}
          volumeMounts:
            - name: {{ .Release.Name }}-genesis-ledger-dir
              mountPath: /root/.mina-config
        {{- end }}
        {{ if .Values.deployment.storeBlocks.enabled -}}
        - name: precomputed-blocks
          image: {{ .Values.deployment.image }}
          env:
            - name: STORE_BLOCKS_DIR
              value: {{ .Values.deployment.storeBlocks.directory }}
            {{ if .Values.deployment.storeBlocks.local.enabled -}}
            - name: STORE_BLOCKS_FILENAME
              value: {{ .Values.deployment.storeBlocks.local.filename }}
            {{- end }}
          command: ["/bin/sh", "-c"]
          args:
            - "mkdir -p $STORE_BLOCKS_DIR "
            {{ if .Values.deployment.storeBlocks.local.enabled -}}
            - "&& touch $STORE_BLOCKS_DIR/$STORE_BLOCKS_FILENAME "
            {{- end }}
          volumeMounts:
            - name: {{ .Release.Name }}-precomputed-blocks
              mountPath: {{ .Values.deployment.storeBlocks.directory }}
        {{- end }}
      containers:
        - name: mina
          resources:
            limits:
              memory: {{ .Values.resources.memoryLimit }}
              cpu: {{ .Values.resources.cpuLimit }}
              {{- if .Values.resources.ephemeralStorageLimit }}
              ephemeral-storage: {{ .Values.resources.ephemeralStorageLimit }}
              {{- end }}
            requests:
              memory: {{ .Values.resources.memoryRequest }}
              cpu: {{ .Values.resources.cpuRequest }}
              {{- if .Values.resources.ephemeralStorageLimit }}
              ephemeral-storage: {{ .Values.resources.ephemeralStorageRequest }}
              {{- end }}
          image: {{ .Values.deployment.image }}
          command: ["/scripts/entrypoint.sh"]
          args: [
            {{- if and (not .Values.node.walletKeys.enabled) .Values.node.daemonMode.snarkWorker }}
            "internal", "snark-worker",
            {{- if .Values.node.daemonAddress }}
            "--daemon-address", {{ .Values.node.daemonAddress | quote }},
            {{- end }}
            {{- if .Values.node.proofLevel }}
            "--proof-level", {{ .Values.node.proofLevel | quote }},
            {{- end }}
            {{- else }}
            "daemon",
            {{- if .Values.deployment.uptime.enabled }}
            "--uptime-url", {{ .Values.deployment.uptime.url | quote }},
            "--uptime-submitter-key", "/root/mina-keys/{{ .Values.node.name }}-key",
            {{- if .Values.deployment.uptime.sendNodeCommitSha }}
            "[--uptime-send-node-commit-sha]", {{ .Values.deployment.uptime.sendNodeCommitSha | quote }},
            {{- end }}
            {{- end }}
            {{- if .Values.node.statsUrl }}
            "--node-status-url", {{ .Values.node.statsUrl | quote }},
            {{- end }}
            {{- if .Values.node.errorsUrl }}
            "--node-error-url", {{ .Values.node.errorsUrl | quote }},
            {{- end }}
            {{- if .Values.node.fileLogLevel }}
            "--file-log-level", {{ .Values.node.fileLogLevel | quote }},
            {{- end -}}
            {{- if .Values.node.logLevel }}
            "--log-level", {{ .Values.node.logLevel | quote }},
            {{- end -}}
            "--client-port", "$(DAEMON_CLIENT_PORT)",
            "--rest-port", "$(MINA_GRAPHQL_PORT)",
            "--external-port", "$(DAEMON_EXTERNAL_PORT)",
            {{- if .Values.node.metrics.enabled }}
            "--metrics-port", "$(DAEMON_METRICS_PORT)",
            {{- end -}}
            {{- if .Values.node.exposeGraphql }}
            "--insecure-rest-server",
            {{- end -}}
            {{- if .Values.node.maxConnections }}
            "--max-connections", {{ .Values.node.maxConnections | quote }},
            {{- end -}}
            {{- if .Values.deployment.peerListURL }}
            "--peer-list-url", {{ .Values.deployment.peerListURL | quote }},
            {{- end -}}
            {{- if .Values.deployment.genesisLedgerURL }}
            "--config-file", "/root/.mina-config/genesis_ledger.json",
            {{- end -}}
            {{- if .Values.node.libp2pKeys.enabled }}
            {{- if .Values.node.libp2pKeys.legacy }}
            "--discovery-keypair", "/root/libp2p-keys/{{ .Values.node.name }}-libp2p",
            {{- else }}
            "--libp2p-keypair", "/root/libp2p-keys/{{ .Values.node.name }}-libp2p",
            {{- end -}}
            {{- end -}}
            {{- with .Values.node }}
            {{- if .snarkWorkerFee }}
            "--snark-worker-fee", "{{ .snarkWorkerFee }}",
            {{- end }}
            {{- if and .walletKeys.enabled .daemonMode.blockProducer }}
            "--block-producer-key", "/root/mina-keys/{{ .name }}-key",
            {{- end }}
            {{- if and .walletKeys.enabled .daemonMode.snarkWorker }}
            "--run-snark-worker", "{{ .secrets.walletPub }}",
            {{- end }}
            {{- if and .walletKeys.enabled .daemonMode.coordinator ( not .daemonMode.snarkWorker ) }}
            "--run-snark-coordinator", "{{ .secrets.walletPub }}",
            {{- end }}
            {{- end }}
            {{- if .Values.node.daemonMode.seed }}
            "--seed",
            {{- end }}
            {{- range .Values.deployment.seedPeers }}
            "--peer", {{ . | quote }},
            {{- end }}
            {{- if and .Values.deployment.storeBlocks.enabled .Values.deployment.storeBlocks.local.enabled  }}
            "--precomputed-blocks-file", {{ .Values.deployment.storeBlocks.directory }}/{{ .Values.deployment.storeBlocks.local.filename }},
            {{- end }}
            {{- if or .Values.deployment.storeBlocks.aws.enabled .Values.deployment.storeBlocks.gcp.enabled }}
            "--upload-blocks-to-gcloud", "true",
            {{- end }}
            {{- if .Values.node.archive.enabled }}
            "--archive-address", {{ .Values.node.archive.address }},
            {{- end }}
            {{- if .Values.node.allPeersSeenMetric }}
            "--all-peers-seen-metric", {{ .Values.node.allPeersSeenMetric | quote }},
            {{- end }}
            {{- if .Values.node.archive.rocksdb }}
            "--archive-rocksdb",
            {{- end }}
            {{- if .Values.node.coinbaseReceiver }}
            "--coinbase-receiver", {{ .Values.node.coinbaseReceiver | quote }},
            {{- end }}
            {{- if .Values.node.archive.background }}
            "--background",
            {{- end }}
            {{- if .Values.node.bindIP }}
            "--bind-ip", {{ .Values.node.bindIP | quote }},
            {{- end }}
            {{- if .Values.node.contactInfo }}
            "--contact-info", {{ .Values.node.contactInfo | quote }},
            {{- end }}
            {{- if .Values.node.currentProtocolVersion }}
            "--current-protocol-version", {{ .Values.node.currentProtocolVersion | quote }},
            {{- end }}
            {{- if .Values.node.demoMode }}
            "--demo-mode",
            {{- end }}
            {{- if .Values.node.directPeer }}
            "--direct-peer", {{ .Values.node.directPeer | quote }},
            {{- end }}
            {{- if .Values.node.disableNodeStatus }}
            "--disable-node-status",
            {{- end }}
            {{- if .Values.node.enableFlooding }}
            "--enable-flooding", {{ .Values.node.enableFlooding | quote }},
            {{- end }}
            {{- if .Values.node.enablePeerExchange }}
            "--enable-peer-exchange", {{ .Values.node.enablePeerExchange | quote }},
            {{- end }}
            {{- if .Values.node.externalIP }}
            "--external-ip", {{ .Values.node.externalIP | quote }},
            {{- end }}
            {{- if .Values.node.generateGenesisProof }}
            "--generate-genesis-proof", {{ .Values.node.generateGenesisProof | quote }},
            {{- end }}
            {{- if .Values.node.fileLogRotations }}
            "--file-log-rotations", {{ .Values.node.fileLogRotations | quote }},
            {{- end }}
            {{- if .Values.node.gcStatInterval }}
            "--gc-stat-interval", {{ .Values.node.gcStatInterval | quote }},
            {{- end }}
            {{- if .Values.node.internalTracing }}
            "--internal-tracing",
            {{- end }}
            {{- if .Values.node.isolateNetwork }}
            "--isolate-network", {{ .Values.node.isolateNetwork | quote }},
            {{- end }}
            {{- if .Values.node.itnGraphQLPort }}
            "--itn-graphql-port", {{ .Values.node.itnGraphQLPort | quote }},
            {{- end }}
            {{- if .Values.node.itnKeys }}
            "--itn-keys", {{ .Values.node.itnKeys | quote }},
            {{- end }}
            {{- if .Values.node.itnMaxLogs }}
            "--itn-max-logs", {{ .Values.node.itnMaxLogs | quote }},
            {{- end }}
            {{- if .Values.node.libp2pMetricsPort }}
            "--libp2p-metrics-port", {{ .Values.node.libp2pMetricsPort | quote }},
            {{- end }}
            {{- if .Values.node.limitedGraphQLPort }}
            "--limited-graphql-port", {{ .Values.node.limitedGraphQLPort | quote }},
            {{- end }}
            {{- if .Values.node.logBlockCreation }}
            "--log-block-creation", {{ .Values.node.logBlockCreation | quote }},
            {{- end }}
            {{- if .Values.node.logPrecomputedBlocks }}
            "--log-precomputed-blocks", {{ .Values.node.logPrecomputedBlocks | quote }},
            {{- end }}
            {{- if .Values.node.logSnarkWorkGossip }}
            "--log-snark-work-gossip", {{ .Values.node.logSnarkWorkGossip | quote }},
            {{- end }}
            {{- if .Values.node.logTxnPoolGossip }}
            "--log-txn-pool-gossip", {{ .Values.node.logTxnPoolGossip | quote }},
            {{- end }}
            {{- if .Values.node.minConnections }}
            "--min-connections", {{ .Values.node.minConnections | quote }},
            {{- end }}
            {{- if .Values.node.minBlockReward }}
            "--minimum-block-reward", {{ .Values.node.minBlockReward | quote }},
            {{- end }}
            {{- if .Values.node.noSuperCatchup }}
            "--no-super-catchup",
            {{- end }}
            {{- if .Values.node.openLimitedGraphQLPort }}
            "--open-limited-graphql-port",
            {{- end }}
            {{- if .Values.node.peer }}
            "--peer", {{ .Values.node.peer | quote }},
            {{- end }}
            {{- if .Values.node.peerListFile }}
            "--peer-list-file", {{ .Values.node.peerListFile | quote }},
            {{- end }}
            {{- if .Values.node.peerListURL }}
            "--peer-list-url", {{ .Values.node.peerListURL | quote }},
            {{- end }}
            {{- if .Values.node.peerProtectionRate }}
            "--peer-protection-rate", {{ .Values.node.peerProtectionRate | quote }},
            {{- end }}
            {{- if .Values.node.precomputedBlocksFile }}
            "--precomputed-blocks-file", {{ .Values.node.precomputedBlocksFile | quote }},
            {{- end }}
            {{- if .Values.node.proofLevel }}
            "--proof-level", {{ .Values.node.proofLevel | quote }},
            {{- end }}
            {{- if .Values.node.proposedProtocolVersion }}
            "--proposed-protocol-version", {{ .Values.node.proposedProtocolVersion | quote }},
            {{- end }}
            {{- if .Values.node.snarkWorkerParallelism }}
            "--snark-worker-parallelism", {{ .Values.node.snarkWorkerParallelism | quote }},
            {{- end }}
            {{- if .Values.node.stopTime }}
            "--stop-time", {{ .Values.node.stopTime | quote }},
            {{- end }}
            {{- if .Values.node.tracing }}
            "--tracing",
            {{- end }}
            {{- if .Values.node.uploadBlocksToGoogleCloud }}
            "--upload-blocks-to-gcloud", {{ .Values.node.uploadBlocksToGoogleCloud | quote }},
            {{- end }}
            {{- if .Values.node.uploadSubmitterKey }}
            "--upload-submitter-key", {{ .Values.node.uploadSubmitterKey | quote }},
            {{- end }}
            {{- if .Values.node.uploadSubmitterPubkey }}
            "--upload-submitter-pubkey", {{ .Values.node.uploadSubmitterPubkey | quote }},
            {{- end }}
            {{- if .Values.node.validationQueueSize }}
            "--validation-queue-size", {{ .Values.node.validationQueueSize | quote }},
            {{- end }}
            {{- if .Values.node.workReassignmentWait }}
            "--work-reassignment-wait", {{ .Values.node.workReassignmentWait | quote }},
            {{- end }}
            {{- if .Values.node.workSelection }}
            "--work-selection", {{ .Values.node.workSelection | quote }},
            {{- end }}
            "--log-json"

            {{- end }}
          ]
          env:
            - name: MINA_NETWORK
              value: {{ .Values.deployment.testnet | quote }}
            - name: MINA_GRAPHQL_PORT
              value: {{ .Values.node.ports.graphql | quote }}
            - name: DAEMON_CLIENT_PORT
              value: {{ .Values.node.ports.client | quote }}
            {{- if .Values.node.metrics.enabled }}
            - name: DAEMON_METRICS_PORT
              value: {{ .Values.node.metrics.port | quote }}
            {{- end }}
            {{- if .Values.node.clientTrustList }}
            - name: MINA_CLIENT_TRUSTLIST
              value: {{ .Values.node.clientTrustList }}
            {{- end }}
            {{- if or .Values.deployment.storeBlocks.gcp.enabled .Values.deployment.storeBlocks.aws.enabled  }}
            - name: GCLOUD_KEYFILE
              value: "/gcloud/keyfile.json"
            {{- if .Values.deployment.storeBlocks.gcp.bucket }}
            - name: GCLOUD_BLOCK_UPLOAD_BUCKET
              value: {{ .Values.deployment.storeBlocks.gcp.bucket | quote }}
            {{- end }}
            - name: NETWORK_NAME
              value: {{ .Values.deployment.testnet | quote }}
            {{- end }}
            - name: DAEMON_EXTERNAL_PORT
              value: {{ .Values.node.ports.p2p | quote }}
            {{- if .Values.node.libp2pKeys.enabled }}
            {{- if .Values.node.libp2pKeys.create }}
            - name: MINA_LIBP2P_PASS_PATH
              value: /root/libp2p-keys/{{ .Values.node.name }}-libp2p.password
            {{- else }}
            - name: MINA_LIBP2P_PASS
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}
                  key: "libp2p-password"
            {{- end }}
            {{- end }}
            {{- if .Values.node.walletKeys.enabled }}
            - name: MINA_PRIVKEY_PASS
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}
                  key: "wallet-password"
            {{- end }}
            {{- if .Values.deployment.uptime.enabled }}
            - name: UPTIME_PRIVKEY_PASS
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}
                  key: "wallet-password"
            {{- end }}
            {{- if .Values.node.discoveryExternalIp.enabled }}
            - name: DISCOVERY_EXTERNAL_IP_ENABLED
              value: "true"
            - name: DISCOVERY_EXTERNAL_IP_TARGET_DNS
              value: {{ .Values.node.discoveryExternalIp.targetDNS | quote }}
            {{- end }}
            {{- if .Values.node.extraEnvVars }}
            {{- toYaml .Values.node.extraEnvVars | nindent 12 }}
            {{- end }}
          ports:
            - name: client-port
              protocol: TCP
              containerPort: {{ .Values.node.ports.client }}
            {{- if .Values.node.metrics.enabled }}
            - name: metrics-port
              protocol: TCP
              containerPort: {{ .Values.node.metrics.port }}
            {{- end }}
            - name: external-port
              protocol: TCP
              containerPort: {{ .Values.node.ports.p2p }}
            {{- if .Values.node.exposeGraphql }}
            - name: graphql-port
              protocol: TCP
              containerPort: {{ .Values.node.ports.graphql }}
            {{- end }}
          {{- if not .Values.node.daemonMode.snarkWorker }}
          livenessProbe:
            {{- toYaml .Values.livenessProbe | nindent 12 }}
          readinessProbe:
            {{- toYaml .Values.readinessProbe | nindent 12 }}
          {{- end }}
          imagePullPolicy: Always
          volumeMounts:
            - name: {{ .Release.Name }}-scripts
              mountPath: /scripts/entrypoint.sh
              subPath: entrypoint.sh
            - name: {{ .Release.Name }}-scripts
              mountPath: /scripts/healthcheck.sh
              subPath: healthcheck.sh
            {{ if .Values.node.libp2pKeys.enabled -}}
            {{ if .Values.node.libp2pKeys.create -}}
            - name: {{ .Release.Name }}-generated-libp2p-keys
              mountPath: /root/libp2p-keys
            {{- else -}}
            - name: {{ .Release.Name }}-fixed-libp2p-keys
              mountPath: /root/libp2p-keys
            {{- end }}
            {{- end }}
            {{- if .Values.node.walletKeys.enabled }}
            - name: {{ .Release.Name }}-fixed-mina-keys
              mountPath: /root/mina-keys
            {{- end }}
            {{- if or .Values.deployment.storeBlocks.gcp.enabled .Values.deployment.storeBlocks.aws.enabled }}
            - name: {{ .Release.Name }}-gcloud-keyfile
              mountPath: "/gcloud/"
            {{- end }}
            {{- if .Values.deployment.genesisLedgerURL }}
            - name: {{ .Release.Name }}-genesis-ledger-dir
              mountPath: /root/.mina-config
            {{- end }}
            {{- if .Values.deployment.storeBlocks.enabled }}
            - name: {{ .Release.Name }}-precomputed-blocks
              mountPath: {{ .Values.deployment.storeBlocks.directory }}
            {{- end }}
            {{- if .Values.deployment.storeBlocks.aws.enabled }}
            - name: {{ .Release.Name }}-scripts
              mountPath: /usr/bin/gsutil
              subPath: gsutil-impersonator.sh
            - name: {{ .Release.Name }}-scripts
              mountPath: /usr/bin/gcloud
              subPath: gcloud-impersonator.sh
            {{- end }}

        {{- if .Values.node.exposeGraphql }}
        - name: graphql-public-proxy
          image: "{{ .Values.graphqlPublicProxy.image.repository }}:{{ .Values.graphqlPublicProxy.image.tag }}"
          imagePullPolicy: {{ .Values.graphqlPublicProxy.image.pullPolicy }}
          env:
            - name: MINA_GRAPHQL_PORT
              value: {{ .Values.node.ports.graphql | quote }}
            - name: EXTERNAL_PORT
              value: {{ .Values.node.ports.proxy | quote }}
          ports:
            - name: proxy
              protocol: TCP
              containerPort: {{ .Values.node.ports.proxy }}
          resources:
            {{- toYaml .Values.graphqlPublicProxy.resources | nindent 12 }}
        {{- end -}}

        {{- if .Values.deployment.storeBlocks.aws.enabled }}
        - name: s3-blocks-uploader
          image: "{{ .Values.s3BlocksUploader.image.repository }}:{{ .Values.s3BlocksUploader.image.tag }}"
          imagePullPolicy: {{ .Values.s3BlocksUploader.image.pullPolicy }}
          command: ["/bin/sh", "/scripts/s3-blocks-uploader.sh"]
          env:
            - name: UPLOAD_INTERVAL
              value: {{ .Values.deployment.storeBlocks.aws.uploadInterval | quote }}
            - name: SOURCE_DIR
              value: {{ .Values.deployment.storeBlocks.directory | quote }}
            - name: S3_BUCKET
              value: {{ .Values.deployment.storeBlocks.aws.bucket | quote }}
            {{- if .Values.deployment.storeBlocks.aws.prefix }}
            - name: PREFIX
              value: {{ .Values.deployment.storeBlocks.aws.prefix | quote }}
            {{- end }}
            {{- if .Values.deployment.storeBlocks.aws.accessKeyID }}
            - name: AWS_ACCESS_KEY_ID
              value: {{ .Values.deployment.storeBlocks.aws.accessKeyID | quote }}
            {{- end }}
            {{- if .Values.deployment.storeBlocks.aws.secretKeyID }}
            - name: AWS_SECRET_ACCESS_KEY
              value: {{ .Values.deployment.storeBlocks.aws.secretKeyID | quote }}
            {{- end }}
            {{- if .Values.deployment.storeBlocks.aws.defaultRegion }}
            - name: AWS_DEFAULT_REGION
              value: {{ .Values.deployment.storeBlocks.aws.defaultRegion | quote }}
            {{- end }}
          resources:
            limits:
              memory: {{ .Values.s3BlocksUploader.resources.memoryLimit }}
              cpu: {{ .Values.s3BlocksUploader.resources.cpuLimit }}
              {{- if .Values.s3BlocksUploader.resources.ephemeralStorageLimit }}
              ephemeral-storage: {{ .Values.s3BlocksUploader.resources.ephemeralStorageLimit }}
              {{- end }}
            requests:
              memory: {{ .Values.s3BlocksUploader.resources.memoryRequest }}
              cpu: {{ .Values.s3BlocksUploader.resources.cpuRequest }}
              {{- if .Values.s3BlocksUploader.resources.ephemeralStorageLimit }}
              ephemeral-storage: {{ .Values.s3BlocksUploader.resources.ephemeralStorageRequest }}
              {{- end }}
          volumeMounts:
            - name: {{ .Release.Name }}-scripts
              mountPath: /scripts/s3-blocks-uploader.sh
              subPath: s3-blocks-uploader.sh
            - name: {{ .Release.Name }}-precomputed-blocks
              mountPath: {{ .Values.deployment.storeBlocks.directory }}
        {{- end }}
      volumes:
        {{- if .Values.node.walletKeys.enabled }}
        - name: {{ .Release.Name }}-mounted-mina-keys
          secret:
            secretName: {{ .Release.Name }}
            defaultMode: 0600
            items:
              - key: {{ .Values.node.name }}-key
                path: {{ .Values.node.name }}-key
              - key: {{ .Values.node.name }}-key.pub
                path: {{ .Values.node.name }}-key.pub
        - name: {{ .Release.Name }}-fixed-mina-keys
          emptyDir: {}
        {{- end }}
        {{- if .Values.deployment.genesisLedgerURL }}
        - name: {{ .Release.Name }}-genesis-ledger-dir
          emptyDir: {}
        {{- end }}
        {{- if .Values.node.libp2pKeys.enabled }}
        {{- if .Values.node.libp2pKeys.create }}
        - name: {{ .Release.Name }}-generated-libp2p-keys
          emptyDir: {}
        {{- else }}
        - name: {{ .Release.Name }}-mounted-libp2p-keys
          secret:
            secretName: {{ .Release.Name }}
            defaultMode: 0600
            items:
              - key: {{ .Values.node.name }}-libp2p
                path: {{ .Values.node.name }}-libp2p
              - key: {{ .Values.node.name }}-libp2p.peerid
                path: {{ .Values.node.name }}-libp2p.peerid
        - name: {{ .Release.Name }}-fixed-libp2p-keys
          emptyDir: {}
        {{- end }}
        {{- end }}
        {{- if or .Values.deployment.storeBlocks.gcp.enabled .Values.deployment.storeBlocks.aws.enabled }}
        - name: {{ .Release.Name }}-gcloud-keyfile
          secret:
            secretName: {{ .Release.Name }}
            defaultMode: 0400
            items:
              - key: gcloud-keyfile
                path: keyfile.json
        {{- end }}
        {{- if .Values.deployment.storeBlocks.enabled }}
        - name: {{ .Release.Name }}-precomputed-blocks
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-precomputed-blocks
        {{- end }}
        - name: {{ .Release.Name }}-scripts
          configMap:
            name: {{ .Release.Name }}-scripts
            defaultMode: 0755
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
